{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions/actions.js","constants/constants.js","registerServiceWorker.js","reducers/reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","staffs","length","map","user","i","components_Card","key","style","fontFamily","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","_this$props","onSearchChange","filteredStaffs","filter","staff","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","dispatch","event","payload","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","store","createStore","arguments","undefined","action","assign","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","particles_default","params","particles","number","density","enable","value_area","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sRAkBeA,EAhBF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wDACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVC,IAAI,QACJC,IAAG,2CAAAC,OAA6CP,EAA7C,UAELC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCYGS,EArBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OAClB,OAAQA,EAAOC,OAKbT,EAAAC,EAAAC,cAAA,WACGM,EAAOE,IAAI,SAACC,EAAMC,GACjB,OACEZ,EAAAC,EAAAC,cAACW,EAAD,CACEC,IAAKF,EACLb,GAAIS,EAAOI,GAAGb,GACdF,KAAMW,EAAOI,GAAGf,KAChBC,MAAOU,EAAOI,GAAGd,WAXzBE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQY,MAAO,CAAEC,WAAY,YAA3C,sBCUWC,EAbG,SAAArB,GAAmCA,EAAhCsB,YAAgC,IAAnBC,EAAmBvB,EAAnBuB,aAChC,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,0BACViB,KAAK,SACLC,YAAY,6BACZC,SAAUH,MCCHI,EARA,SAAAC,GACb,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iGACZqB,EAAMC,WCiBPC,qBACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACX1B,OAAQ,IAHEmB,mFAOM,IAAAQ,EAAAL,KAClBM,MAAM,8CACHC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GAAK,OAAIL,EAAKM,SAAS,CAAEjC,OAAQgC,uCAGlC,IACChC,EAAWsB,KAAKI,MAAhB1B,OADDkC,EAEiCZ,KAAKN,MAArCN,EAFDwB,EAECxB,YAAayB,EAFdD,EAEcC,eACfC,EAAiBpC,EAAOqC,OAAO,SAAAC,GACnC,OAAOA,EAAMjD,KAAKkD,cAAcC,SAAS9B,EAAY6B,iBAEvD,OAAQvC,EAAOC,OAGbT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,mBACAH,EAAAC,EAAAC,cAAC+C,EAAD,CAAW9B,aAAcwB,IACzB3C,EAAAC,EAAAC,cAACgD,EAAD,KACElD,EAAAC,EAAAC,cAACiD,EAAD,CAAU3C,OAAQoC,MANtB5C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,kBAvBYiD,cAoCHC,cAjDS,SAAAnB,GACtB,MAAO,CACLhB,YAAagB,EAAMhB,cAKI,SAAAoC,GACzB,MAAO,CACLX,eAAgB,SAAAY,GAAK,OAAID,EChBY,CACvClC,KCHmC,wBDInCoC,QDcmDD,EAAME,OAAOC,WAwCnDL,CAGb3B,GGnDIiC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT7B,KAAK,SAAAiC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfiC,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC7EjE,IAAMC,EAAe,CACnB9D,YAAa,qBCqBT+D,EAAQC,YDlBiB,WAAuC,IAAtChD,EAAsCiD,UAAA1E,OAAA,QAAA2E,IAAAD,UAAA,GAAAA,UAAA,GAA9BH,EAAcK,EAAgBF,UAAA1E,OAAA,QAAA2E,IAAAD,UAAA,GAAAA,UAAA,GAAP,GAC7D,OAAQE,EAAOjE,MACb,IFRiC,wBES/B,OAAOQ,OAAO0D,OAAO,GAAIpD,EAAO,CAAEhB,YAAamE,EAAO7B,UACxD,QACE,OAAOtB,ICeX2B,OAAO0B,8BAAgC1B,OAAO0B,gCAGhDC,IAASC,OACPzF,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAAUT,MAAOA,GACfjF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyF,EAAA1F,EAAD,CAAWE,UAAU,YAAYyF,OApBd,CACvBC,UAAW,CACTC,OAAQ,CACNpC,MAAO,GACPqC,QAAS,CACPC,QAAQ,EACRC,WAAY,UAedjG,EAAAC,EAAAC,cAACgG,EAAD,QAGJC,SAASC,eAAe,SFhBX,WACb,GAA6C,kBAAmBjC,UAAW,CAGzE,GADkB,IAAIkC,IAAIC,mBAAwBzC,OAAOC,UAC3CyC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,OAAQ,WAC9B,IAAMtC,EAAK,GAAA5D,OAAMgG,mBAAN,sBAEP3C,GAiDV,SAAiCO,GAE/B9B,MAAM8B,GACH7B,KAAK,SAAAC,GAGkB,MAApBA,EAASmE,SACuD,IAAhEnE,EAASoE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzC,UAAUC,cAAcyC,MAAMxE,KAAK,SAAAiC,GACjCA,EAAawC,aAAazE,KAAK,WAC7BwB,OAAOC,SAASiD,aAKpB9C,EAAgBC,KAGnBY,MAAM,WACLF,QAAQC,IACN,mEArEAmC,CAAwB9C,GAIxBC,UAAUC,cAAcyC,MAAMxE,KAAK,WACjCuC,QAAQC,IACN,+GAMJZ,EAAgBC,MEVxB+C","file":"static/js/main.1dda2af9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img\r\n        className=\"br-100\"\r\n        alt=\"staff\"\r\n        src={`https://randomuser.me/api/portraits/men/${id}.jpg`}\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ staffs }) => {\r\n  return !staffs.length ? (\r\n    <h2 className=\"white\" style={{ fontFamily: 'Verdana' }}>\r\n      No matched name..\r\n    </h2>\r\n  ) : (\r\n    <div>\r\n      {staffs.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={staffs[i].id}\r\n            name={staffs[i].name}\r\n            email={staffs[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 br-pill ba b--black\"\r\n        type=\"search\"\r\n        placeholder=\"&#61442; &nbsp; Type a name...\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div className=\"br3 ba dark-gray b--black-10 mv4-ns mv1 mh4 shadow-5 overflow-y-scroll vh-50-ns vh-75 pt3 pb3\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { setSearchField } from '../actions/actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchField\r\n  };\r\n};\r\n\r\n//Action being dispatched\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value))\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      staffs: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(users => this.setState({ staffs: users }));\r\n  }\r\n\r\n  render() {\r\n    const { staffs } = this.state;\r\n    const { searchField, onSearchChange } = this.props;\r\n    const filteredStaffs = staffs.filter(staff => {\r\n      return staff.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return !staffs.length ? (\r\n      <h1 className=\"tc vh-100 pt6 fs\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc vh-100 pt4-ns pt3\">\r\n        <div className=\"f1-ns f1 title\">Profile Manager</div>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <CardList staffs={filteredStaffs} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import { INTERACT_SEARCH_FIELD } from '../constants/constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: INTERACT_SEARCH_FIELD,\r\n  payload: text\r\n})","export const INTERACT_SEARCH_FIELD = 'INTERACT_SEARCH_FIELD';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { INTERACT_SEARCH_FIELD } from '../constants/constants';\r\n\r\nconst initialState = {\r\n  searchField: ''\r\n};\r\n\r\nexport const searchingStaffs = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case INTERACT_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchingStaffs } from './reducers/reducers';\n\nimport Particles from 'react-particles-js';\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nconst store = createStore(\n  searchingStaffs,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <Particles className=\"particles\" params={particlesOptions} />\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}